#librarying packages

library("tidyverse")
library("RColorBrewer")
library("ggthemes")
library("shiny")
library("bslib")
library("zip")

#making UI 

UI_timeseries <- fluidPage(
  title = "iNaturalist summaries",
  h1("iNaturalist Summaries app made by Toby Jin 
     (iNaturalist user: toby_j_77,
      YouTube: Toby Jin,
      Instagram: toby.j_77)"),
  
  img(src = "New_profile_picture_2025.jpg",
      height = "5%",
      width = "5%",
      align = "top",
      align = "right"),
  
  img(src = "New logo 2024.png",
      height = "5%",
      width = "5%",
      align = "left",
      align = "top",
      style = "position;
      top = 2%"),
  
  fileInput(
    inputId = "DATA",
    label = "Upload a File (.csv only)",
    accept = ".csv"),
  
  radioButtons(
    inputId = "TAXONOMIC_RANK",
    label = "Taxonomic Level",
    choices = list(
      "taxon_family_name",
      "taxon_genus_name",
      "taxon_species_name"
    )
  ),
  
  selectizeInput(
    inputId = "TAXON_LIST",
    label = "Select Taxa (up to 5 selections)",
    choices = NULL,
    multiple = TRUE,
    options = list(maxItems = 5)
  ),
  
  downloadButton(
    outputId = "DOWNLOADS",
    label = "Download plots"),
  
  uiOutput(outputId = "select_taxon"),
  
  navset_card_underline(
    nav_panel(title = "Number of observations by date",
              plotOutput(outputId = "OBSERVATIONS_PLOT")),
    nav_panel(title = "Cumulative number of observations by date",
              plotOutput(outputId = "CUMULATIVE_OBSERVATIONS_PLOT")),
    nav_panel(title = "Table of observations",
              tableOutput(outputId = "OBSERVATIONS_TABLE"))),
  )

#making server 

Server_timeseries <- function(input, output, session) {
  
  ##creating drop-down
  
  observe({
    print(input$TAXONOMIC_RANK)
    
    req(input$DATA)
    
    FILE <- input$DATA
    iNat_data <- read_csv(FILE$datapath)
    
    TAXON_LIST <- iNat_data %>%
      select(input$TAXONOMIC_RANK)
    
    updateSelectizeInput(
      session = session,
      inputId = "TAXON_LIST",
      label = "Select Taxa (up to 5 selections)",
      choices = (as.list(levels(
        factor(TAXON_LIST[[1]])
      ))),
      server = TRUE
    )
  })
  
  ##reactive plots and tables
  
  reactive_objects <- reactive({
    
    req(input$TAXON_LIST)
    
    req(input$DATA)
    
    #loading in data
    
    FILE <- input$DATA
    iNat_data <- read_csv(FILE$datapath) |> as_tibble() %>%
      mutate(taxon_family_name = as.factor(taxon_family_name)) %>%
      mutate(taxon_genus_name = as.factor(taxon_genus_name)) %>%
      mutate(taxon_species_name = as.factor(taxon_species_name)) %>%
      mutate(observed_on = as_date(observed_on))
    
    ## case 1: family is chosen
    
    if (input$TAXONOMIC_RANK == "taxon_family_name") {
      family_data <- iNat_data %>%
        filter(taxon_family_name %in% c(input$TAXON_LIST)) %>%
        mutate(taxon_family_name = as.factor(as.character(taxon_family_name))) %>%
        count(taxon_family_name, observed_on) %>%
        complete(
          taxon_family_name,
          observed_on = seq.Date(
            from = min(observed_on),
            to = max(observed_on),
            by = "days"
          ),
          fill = list(n = 0)
        ) %>%
        group_by(taxon_family_name) %>%
        mutate(n_cumulative = cumsum(n)) %>%
        ungroup()
      
      #ggplotting timeseries
      
      observations_plot <- ggplot(family_data) +
        geom_col(
          aes(x = observed_on, y = n, fill = taxon_family_name),
          position = "dodge",
          width = 1
        ) +
        scale_x_date(date_breaks = "year") +
        theme_bw() +
        scale_fill_brewer(palette = "Set1") +
        labs(x = "Date", y = "number of observations", fill = "Family")
      
      #ggplotting cumulative timeseries
      
      cumulative_observations_plot <- ggplot(family_data) +
        geom_line(aes(x = observed_on, y = n_cumulative, col = taxon_family_name),
                  linewidth = 1) +
        scale_x_date(date_breaks = "year") +
        theme_bw() +
        scale_colour_brewer(palette = "Set1") +
        labs(x = "Date", y = "cumulative number of observations", col = "Family")
      
      #creating table of observations
      
      observations_table <- iNat_data %>%
        filter(taxon_family_name %in% c(input$TAXON_LIST)) %>%
        select(
          taxon_family_name,
          taxon_genus_name,
          taxon_species_name,
          observed_on,
          user_login,
          user_name,
          quality_grade,
          license,
          url,
          latitude,
          longitude,
          coordinates_obscured
        ) %>%
        arrange(observed_on) %>%
        mutate(observed_on = as.character(observed_on))
      
    }
    
    else{
      ### case 2: if genus is chosen
      
      if (input$TAXONOMIC_RANK == "taxon_genus_name") {
        genus_data <- iNat_data %>%
          filter(taxon_genus_name %in% c(input$TAXON_LIST)) %>%
          mutate(taxon_genus_name = as.factor(as.character(taxon_genus_name))) %>%
          count(taxon_genus_name, observed_on) %>%
          complete(
            taxon_genus_name,
            observed_on = seq.Date(
              from = min(observed_on),
              to = max(observed_on),
              by = "days"
            ),
            fill = list(n = 0)
          ) %>%
          group_by(taxon_genus_name) %>%
          mutate(n_cumulative = cumsum(n)) %>%
          ungroup()
        
        #ggplotting timeseries
        
        observations_plot <- ggplot(genus_data) +
          geom_col(
            aes(x = observed_on, y = n, fill = taxon_genus_name),
            position = "dodge",
            width = 1
          ) +
          scale_x_date(date_breaks = "year") +
          theme_bw() +
          scale_fill_brewer(palette = "Dark2") +
          labs(x = "Date", y = "number of observations", fill = "Genus")
        
        #ggplotting cumulative timeseries
        
        cumulative_observations_plot <- ggplot(genus_data) +
          geom_line(aes(x = observed_on, y = n_cumulative, col = taxon_genus_name),
                    linewidth = 1) +
          scale_x_date(date_breaks = "year") +
          theme_bw() +
          scale_colour_brewer(palette = "Dark2") +
          labs(x = "Date", y = "cumulative number of observations", col = "Genus")
        
        #table of observations
        
        observations_table <- iNat_data %>%
          filter(taxon_genus_name %in% c(input$TAXON_LIST)) %>%
          select(
            taxon_family_name,
            taxon_genus_name,
            taxon_species_name,
            observed_on,
            user_login,
            user_name,
            quality_grade,
            license,
            url,
            latitude,
            longitude,
            coordinates_obscured
          ) %>%
          arrange(observed_on) %>%
          mutate(observed_on = as.character(observed_on))

      }
      
      else{
        ### case 3: if species is chosen
        
        if (input$TAXONOMIC_RANK == "taxon_species_name") {
          #creating data
          
          species_data <- iNat_data %>%
            filter(taxon_species_name %in% c(input$TAXON_LIST)) %>%
            mutate(taxon_species_name = as.factor(as.character(taxon_species_name))) %>%
            count(taxon_species_name, observed_on) %>%
            complete(
              taxon_species_name,
              observed_on = seq.Date(
                from = min(observed_on),
                to = max(observed_on),
                by = "days"
              ),
              fill = list(n = 0)
            ) %>%
            group_by(taxon_species_name) %>%
            mutate(n_cumulative = cumsum(n)) %>%
            ungroup()
          
          #ggplotting timeseries
          
          observations_plot <- ggplot(species_data) +
            geom_col(
              aes(x = observed_on, y = n, fill = taxon_species_name),
              position = "dodge",
              width = 1,
            ) +
            scale_x_date(date_breaks = "year") +
            theme_bw() +
            scale_fill_brewer(palette = "Set2") +
            labs(x = "Date", y = "number of observations", fill = "Species")
          
          #ggplotting cumulative timeseries
          
          cumulative_observations_plot <- ggplot(species_data) +
            geom_line(aes(x = observed_on, y = n_cumulative, col = taxon_species_name),
                      linewidth = 1) +
            scale_x_date(date_breaks = "year") +
            theme_bw() +
            scale_colour_brewer(palette = "Set2") +
            labs(x = "Date", y = "cumulative number of observations", col = "Species")
          
          #table of observations
          
          observations_table <- iNat_data %>%
            filter(taxon_species_name %in% c(input$TAXON_LIST)) %>%
            select(
              taxon_family_name,
              taxon_genus_name,
              taxon_species_name,
              observed_on,
              user_login,
              user_name,
              quality_grade,
              license,
              url,
              latitude,
              longitude,
              coordinates_obscured
            ) %>%
            arrange(observed_on) %>%
            mutate(observed_on = as.character(observed_on))
        }
      }
    }
    
    #return lists
    
    return(list(
      observations_plot = observations_plot,
      cumulative_observations_plot = cumulative_observations_plot,
      observations_table = observations_table))
  })
  
  ##creating number of observations by date
  
  output$OBSERVATIONS_PLOT <- renderPlot(reactive_objects()$observations_plot)
  
  ##creating cumulative number of observations by date
  
  output$CUMULATIVE_OBSERVATIONS_PLOT <- renderPlot(reactive_objects()$cumulative_observations_plot)
  
  ##creating the table of observations
  
  output$OBSERVATIONS_TABLE <- renderTable(reactive_objects()$observations_table)
  
  ##downloading plots and table as a zip file.
  
  output$DOWNLOADS <- downloadHandler(
    
    #creating zip folder
    
    filename = "Timeseries.zip",
    
    content = function(file){
      
      #timeseries plot
      
      ggsave(file.path(tempdir(),"Timeseries.png"),
             plot = reactive_objects()$observations_plot,
             device = "png",
             width = 10,
             height = 5, 
             dpi = 400)
      
      #cumulative timeseries plot
      
      ggsave(file.path(tempdir(),"Cumulative_timeseries.png"),
             plot = reactive_objects()$cumulative_observations_plot,
             device = "png",
             width = 10,
             height = 5, 
             dpi = 400)
      
      zip(file, files = c(file.path(tempdir(),"Timeseries.png"), 
                          file.path(tempdir(),"Cumulative_timeseries.png")),
          mode = "cherry-pick")
    }
  )
}


#running the app

shinyApp(UI_timeseries, Server_timeseries)