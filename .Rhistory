data_indices_raw <- list.append(data_indices_raw, data_ends)
}
#adding the last chunk
l = length(na_ends_list)
data_indices_raw <- list.append(data_indices_raw, c(na_ends_list[[l]][2],
nrow(test_data)))
data_indices_raw
#checking length of each chunk
data_indices <- vector(mode = "list", length = 0)
for(m in 1:length(data_indices_raw)){
index_chunk <- data_indices_raw[[m]]
if(index_chunk[2] - index_chunk[1] > 3){
data_indices <- list.append(data_indices, index_chunk)
}
}
data_indices
# Chunk 7
#looping
#creating a list of chunks
data_chunks <- vector(mode = "list", length = 0)
for (n in 1:length(data_indices)) {
#saving each chunk into data_chunks
data_chunks <- list.append(data_chunks,
test_data %>% slice(
data_indices[[n]][1]:
data_indices[[n]][2]))
}
data_chunks
#create an empty column for test_data
test_data <- test_data %>%
mutate(RA = NA)
#calculating running average for each chunk and adding back to original dataset
for(n in 1:length(data_chunks)){
#fill in NAs
data_chunks[[n]] <- data_chunks[[n]] %>%
mutate(test_2 = zoo::na.approx(test_2)) %>%
mutate(RA = TTR::SMA(test_2, 3))
}
data_chunks
#adding data back (AI generated and then I edited the code)
for (n in 1:length(data_chunks)) {
# Extract the row indices for the current chunk
chunk_start <- data_indices[[n]][1]
chunk_end <- data_indices[[n]][2]
# Replace the RA column and test_2 column
test_data[chunk_start:chunk_end, "RA"] <- data_chunks[[n]]$RA
test_data[chunk_start:chunk_end, "test_2"] <- data_chunks[[n]]$test_2
}
test_data
smooth_chunks <- function(vec, NA_length = 3, RA_length = 3) {
library(zoo)
library(TTR)
n <- length(vec)
result <- rep(NA_real_, n)
# Identify runs of NAs
rle_na <- rle(is.na(vec))
na_runs <- which(rle_na$values & rle_na$lengths >= NA_length)
# Get start and end indices of NA segments
na_ends_list <- list()
idx <- 0
for (i in na_runs) {
start_idx <- sum(rle_na$lengths[seq_len(i - 1)]) + 1
end_idx <- start_idx + rle_na$lengths[i] - 1
na_ends_list[[idx <- idx + 1]] <- c(start_idx - 1, end_idx + 1)
}
# Build data chunks between NA segments
data_indices_raw <- list()
if (length(na_ends_list) > 0) {
data_indices_raw[[1]] <- c(1, na_ends_list[[1]][1])
for (i in 2:length(na_ends_list)) {
data_indices_raw[[i]] <- c(na_ends_list[[i - 1]][2], na_ends_list[[i]][1])
}
data_indices_raw[[length(na_ends_list) + 1]] <- c(na_ends_list[[length(na_ends_list)]][2], n)
} else {
data_indices_raw[[1]] <- c(1, n)
}
# Filter chunks by minimum length
data_indices <- Filter(function(x) x[2] - x[1] >= RA_length - 2, data_indices_raw)
# Process each chunk
for (chunk in data_indices) {
idx_range <- chunk[1]:chunk[2]
chunk_vec <- vec[idx_range]
# Interpolate NAs and apply running average
filled <- zoo::na.approx(chunk_vec, na.rm = FALSE)
smoothed <- TTR::SMA(filled, RA_length)
# Assign to result
result[idx_range] <- smoothed
}
return(result)
}
test_filled <- test_filled %>%
mutate(RA = split_fill(test_2, NA_length = 5, RA_length = 3))
test_filled <- test %>%
mutate(RA = split_fill(test_2, NA_length = 5, RA_length = 3))
library(zoo)   # for na.approx()
library(TTR)   # for SMA()
split_fill <- function(x,
na_length = 5,
ra_length = 3) {
n <- length(x)
# vector of chunk IDs (0 means “skip – big NA run”)
chunk_id <- integer(n)
id <- 1L
i <- 1L
while(i <= n) {
start <- i
j     <- start
# advance j until we hit a “big” NA run
while(j <= n) {
if (is.na(x[j])) {
# measure the length of this NA run
k <- j
while(k <= n && is.na(x[k])) k <- k + 1L
if ((k - j) >= na_length) {
# this is a splitter—stop before it
break
} else {
# small NA run: include it in the chunk
j <- k
}
} else {
j <- j + 1L
}
}
end <- j - 1L
if (end >= start) {
# assign this interval to chunk `id`
chunk_id[start:end] <- id
id <- id + 1L
}
# skip the big NA run entirely
if (j <= n && is.na(x[j])) {
k <- j
while(k <= n && is.na(x[k])) k <- k + 1L
i <- k
} else {
i <- j
}
}
# prepare output
ra <- rep(NA_real_, n)
# process each chunk
for (g in unique(chunk_id[chunk_id > 0])) {
idx <- which(chunk_id == g)
if (length(idx) >= ra_length) {
seg <- x[idx]
# 1) interpolate short NAs
seg_filled <- na.approx(seg, na.rm = FALSE)
# 2) running average
ra_vals <- SMA(seg_filled, n = ra_length)
ra[idx] <- ra_vals
}
}
ra
}
#testing
test <- read_csv("Input_data/test_data.csv")
test_filled <- test %>%
mutate(RA = split_fill(test_2, NA_length = 5, RA_length = 3))
test_filled <- test %>%
mutate(RA = split_fill(test_2, na_length = 5, ra_length = 3))
test_filled
test_filled |> nrow(n = 48)
test_filled |> print(n = 48)
test_data
ra
source("C:/TobyJin/Toby/UNSW/2025/Term 2/MSCI3001/Reseach_project_web_app/split_fill_ai_assisted.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(shiny); runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
View(data_joined_RA)
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
library(shiny); runApp('Web_app_code.R')
runApp('Web_app_code.R')
library("tidyverse")
library("RColorBrewer")
library("forecast")
library("ggthemes")
library("shiny")
library("bslib")
library("zip")
runApp('Web_app_code.R')
library(shiny); runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
library(shiny); runApp('Web_app_code.R')
# Chunk 1
#librarying packages
library("tidyverse")
library("forecast")
# Chunk 2
#loading in data
Sydney_min <- read_csv("Input_data/Sydney_observatory_hill_min.csv") |> as_tibble()
Sydney_max <- read_csv("Input_data/Sydney_observatory_hill_max.csv") |> as_tibble()
#changing column names
names(Sydney_min) <- c("Product_code", "Station_number", "Year", "Month", "Day", "Min_T", "Days_of_accumulation_min_T", "Quality_min_T")
names(Sydney_max) <- c("Product_code", "Station_number", "Year", "Month", "Day", "Max_T", "Days_of_accumulation_max_T", "Quality_max_T")
#correcting data structure
Sydney_min <- Sydney_min %>%
mutate(Quality_min_T = as_factor(Quality_min_T)) %>%
mutate(Date = paste(Year, Month, Day, sep = "-")) %>%
mutate(Date = as_date(Date)) %>%
mutate(Month = as.factor(Month))
Sydney_max <- Sydney_max %>%
mutate(Quality_max_T = as_factor(Quality_max_T)) %>%
mutate(Date = paste(Year, Month, Day, sep = "-")) %>%
mutate(Date = as_date(Date)) %>%
mutate(Month = as.factor(Month))
#checking structure
Sydney_min
Sydney_max
# Chunk 3
#binding data
Sydney_temp <- right_join(Sydney_min, Sydney_max, by = "Date", keep = FALSE)
#removing extra columns
Sydney_temp <- Sydney_temp %>%
select(-ends_with(".y"))
#removing .x at the end of columns
names(Sydney_temp) <- c("Product_code", "Station_number", "Year", "Month", "Day", "Min_T", "Days_of_accumulation_min_T", "Quality_min_T", "Date", "Max_T", "Days_of_accumulation_max_T","Quality_max_T")
# Chunk 4
#adding extra columns
Sydney_temp <- Sydney_temp %>%
mutate(T_range = Max_T - Min_T) %>%
mutate(Mean_min_T = mean(Min_T, na.rm = TRUE)) %>%
mutate(Mean_max_T = mean(Max_T, na.rm = TRUE)) %>%
mutate(Min_T_anomaly = Min_T - Mean_min_T) %>%
mutate(Max_T_anomaly = Max_T - Mean_max_T)
# Chunk 5
#basic timeseries
timeseries_plot <- ggplot(
Sydney_temp %>%
select(Min_T, Max_T, Date) %>%
pivot_longer(
cols = c(Min_T, Max_T),
names_to = "Min_or_max",
values_to = "Temp"
)
) +
geom_line(aes(x = Date, y = Temp, col = Min_or_max)) +
labs(x = "Date", y = "Temperature (\u00b0C)", col = "Min/Max") +
theme_bw() +
scale_colour_manual(values = c("red", "blue"),
labels = c("Maximum", "Minimum"))
# coord_cartesian(xlim = c(as_date("1950-01-01"), as_date("2000-12-31")))
timeseries_plot
# Chunk 6
#basic timeseries with moving average
Sydney_temp_MA <- Sydney_temp %>%
mutate(Min_T = zoo::na.approx(Min_T)) %>%
mutate(Max_T = zoo::na.approx(Max_T)) %>%
mutate(MA_min_T = TTR::SMA(Min_T, 365)) %>%
mutate(MA_max_T = TTR::SMA(Max_T, 365)) %>%
select(Min_T, Max_T, MA_min_T, MA_max_T, Date) %>%
pivot_longer(
cols = c(Min_T, Max_T, MA_min_T, MA_max_T),
names_to = "Min_or_max",
values_to = "Temp"
)
#plotting
timeseries_plot_MA <- ggplot(Sydney_temp_MA) +
geom_line(aes(
x = Date,
y = Temp,
col = Min_or_max,
alpha = Min_or_max
)) +
labs(x = "Date",
y = "Temperature (\u00b0C)",
col = "Min/Max",
alpha = "Min/Max") +
theme_bw() +
scale_colour_manual(
values = c("red", "blue", "red", "blue"),
labels = c(
"Running average maximum",
"Running average minimum",
"Maximum",
"Minimum"
)
) +
scale_alpha_manual(
values = c(1, 1, 0.25, 0.25),
labels = c(
"Running average maximum",
"Running average minimum",
"Maximum",
"Minimum"
)
)
timeseries_plot_MA
# Chunk 7
#custom function
month_middle <- function(DATE) {
if_else(condition = {
(month(DATE) %in% c(1, 3, 5, 7, 8, 10, 12))
},
true = {
Date_middle <- floor_date(DATE, "month") + days(15)
},
false = {
if_else(condition = {
(month(DATE) %in% c(4, 6, 9, 11))
},
true = {
Date_middle <- floor_date(DATE, "month") + days(14)
},
false = {
if_else(condition = {
((year(DATE) / 4) %% 1 == 0)
},
true = {
Date_middle <- floor_date(DATE, "month") + days(14)
},
false = {
Date_middle <- floor_date(DATE, "month") + days(13)
})
})
})
}
#creating data
Sydney_monthly <- Sydney_temp %>%
group_by(Month) %>%
mutate(Monthly_mean_min_T = mean(Min_T, na.rm = TRUE)) %>%
mutate(Monthly_mean_max_T = mean(Max_T, na.rm = TRUE)) %>%
ungroup() %>%
group_by(Year, Month) %>%
mutate(Monthly_anomaly_min_T = mean(Min_T, na.rm = TRUE) - Monthly_mean_min_T) %>%
mutate(Monthly_anomaly_max_T = mean(Max_T, na.rm = TRUE) - Monthly_mean_max_T) %>%
ungroup() %>%
mutate(Month_middle = month_middle(Date))
# Chunk 8
#ggplotting
monthly_mean_plot <- ggplot(
Sydney_monthly %>%
group_by(Month, Monthly_mean_min_T, Monthly_mean_max_T) %>%
summarise(
Monthly_mean_min_T = mean(Monthly_mean_min_T),
Monthly_mean_max_T = mean(Monthly_mean_max_T)
) %>%
pivot_longer(
cols = c(Monthly_mean_min_T, Monthly_mean_max_T),
names_to = "Min_or_max",
values_to = "Monthly_mean_T"
)
) +
geom_col(
aes(x = Month, y = Monthly_mean_T, fill = Min_or_max),
col = "black",
position = "dodge"
) +
labs(x = "Month", y = "Mean Temperature (\u00b0C)", fill = "Min/Max") +
theme_bw() +
scale_fill_manual(values = c("red", "blue"),
labels = c("Maximum", "Minimum"))
monthly_mean_plot
# Chunk 9
#ggplotting
monthly_anomalies <- ggplot(
Sydney_monthly %>%
distinct(Month_middle, Monthly_anomaly_min_T, Monthly_anomaly_max_T) %>%
pivot_longer(
cols = c(Monthly_anomaly_min_T, Monthly_anomaly_max_T),
names_to = "Min_or_max",
values_to = "Monthly_anomaly"
)
) +
geom_line(aes(x = Month_middle, y = Monthly_anomaly, col = Min_or_max),
linewidth = 0.75) +
labs(x = "Date", y = "Monthly temperature anomaly (\u00b0C)", col = "Min/Max") +
theme_bw() +
scale_colour_manual(values = c("red", "blue"),
labels = c("Maximum", "Minimum")) +
coord_cartesian(xlim = c(as_date("1950-01-01"), as_date("2000-12-31")))
monthly_anomalies
# Chunk 10
#ggplotting
monthly_anomalies_plot_matrix <- ggplot(
Sydney_monthly %>%
distinct(Monthly_anomaly_min_T, Monthly_anomaly_max_T, Year, Month) %>%
pivot_longer(
cols = c(Monthly_anomaly_min_T, Monthly_anomaly_max_T),
names_to = "Min_or_max",
values_to = "Monthly_anomaly"
)
) +
geom_line(aes(x = Year, y = Monthly_anomaly, col = Min_or_max),
linewidth = 0.75) +
labs(x = "Date", y = "Monthly temperature anomaly (\u00b0C)", col = "Min/Max") +
theme_bw() +
scale_colour_manual(values = c("red", "blue"),
labels = c("Maximum", "Minimum")) +
facet_wrap( ~ Month)
monthly_anomalies_plot_matrix
# #testing stuff
#
# test_df <- Sydney_monthly %>%
#     distinct(Month_middle, Monthly_anomaly_min_T, Monthly_anomaly_max_T)
View(Sydney_monthly)
monthly_anomalies_plot_matrix <- ggplot(
Sydney_monthly %>%
distinct(Monthly_anomaly_min_T, Monthly_anomaly_max_T, Year, Month) %>%
pivot_longer(
cols = c(Monthly_anomaly_min_T, Monthly_anomaly_max_T),
names_to = "Min_or_max",
values_to = "Monthly_anomaly"
)
) +
geom_line(aes(x = Year, y = Monthly_anomaly, col = Min_or_max),
linewidth = 0.75) +
labs(x = "Date", y = "Monthly temperature anomaly (\u00b0C)", col = "Min/Max") +
theme_bw() +
geom_smooth(aes(x = Year, y = Monthly_anomaly, col = Min_or_max)) +
scale_colour_manual(values = c("red", "blue"),
labels = c("Maximum", "Minimum")) +
facet_wrap( ~ Month)
monthly_anomalies_plot_matrix
monthly_anomalies_plot_matrix <- ggplot(
Sydney_monthly %>%
distinct(Monthly_anomaly_min_T, Monthly_anomaly_max_T, Year, Month) %>%
pivot_longer(
cols = c(Monthly_anomaly_min_T, Monthly_anomaly_max_T),
names_to = "Min_or_max",
values_to = "Monthly_anomaly"
)
) +
geom_line(aes(x = Year, y = Monthly_anomaly, col = Min_or_max),
linewidth = 0.75) +
labs(x = "Date", y = "Monthly temperature anomaly (\u00b0C)", col = "Min/Max") +
theme_bw() +
geom_smooth(aes(x = Year, y = Monthly_anomaly, col = Min_or_max),
method = "lm") +
scale_colour_manual(values = c("red", "blue"),
labels = c("Maximum", "Minimum")) +
facet_wrap( ~ Month)
monthly_anomalies_plot_matrix
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
options(error = recover)
runApp('Web_app_code.R')
options(error = NULL)
runApp('Web_app_code.R')
View(data_joined_RA)
runApp('Web_app_code.R')
#adding extra columns
Sydney_temp <- Sydney_temp %>%
mutate(T_range = Max_T - Min_T) %>%
mutate(Mean_min_T = mean(Min_T, na.rm = TRUE)) %>%
mutate(Mean_max_T = mean(Max_T, na.rm = TRUE)) %>%
mutate(Min_T_anomaly = Min_T - Mean_min_T) %>%
mutate(Max_T_anomaly = Max_T - Mean_max_T)
#ggplotting
monthly_mean_plot <- ggplot(
Sydney_monthly %>%
group_by(Month, Monthly_mean_min_T, Monthly_mean_max_T) %>%
summarise(
Monthly_mean_min_T = mean(Monthly_mean_min_T),
Monthly_mean_max_T = mean(Monthly_mean_max_T)
) %>%
pivot_longer(
cols = c(Monthly_mean_min_T, Monthly_mean_max_T),
names_to = "Min_or_max",
values_to = "Monthly_mean_T"
)
) +
geom_col(
aes(x = Month, y = Monthly_mean_T, fill = Min_or_max),
col = "black",
position = "dodge"
) +
labs(x = "Month", y = "Mean Temperature (\u00b0C)", fill = "Min/Max") +
theme_bw() +
scale_fill_manual(values = c("red", "blue"),
labels = c("Maximum", "Minimum"))
monthly_mean_plot
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
runApp('Web_app_code.R')
library(shiny); runApp('Web_app_code.R')
